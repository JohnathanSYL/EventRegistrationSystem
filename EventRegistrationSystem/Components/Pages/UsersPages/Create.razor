@page "/users/create"
@using Microsoft.EntityFrameworkCore
@using EventRegistrationSystem.Domain
@inject IDbContextFactory<EventRegistrationSystem.Data.EventRegistrationSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Users</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Users" OnValidSubmit="AddUsers" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Users.Name" class="form-control" /> 
                <ValidationMessage For="() => Users.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label> 
                <InputText id="email" @bind-Value="Users.Email" class="form-control" /> 
                <ValidationMessage For="() => Users.Email" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label> 
                <InputText id="password" @bind-Value="Users.Password" class="form-control" /> 
                <ValidationMessage For="() => Users.Password" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="phonenumber" class="form-label">PhoneNumber:</label> 
                <InputNumber id="phonenumber" @bind-Value="Users.PhoneNumber" class="form-control" /> 
                <ValidationMessage For="() => Users.PhoneNumber" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="role" class="form-label">Role:</label> 
                <InputText id="role" @bind-Value="Users.Role" class="form-control" /> 
                <ValidationMessage For="() => Users.Role" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="preferences" class="form-label">Preferences:</label> 
                <InputText id="preferences" @bind-Value="Users.Preferences" class="form-control" /> 
                <ValidationMessage For="() => Users.Preferences" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Users.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Users.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="Users.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => Users.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="Users.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => Users.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="Users.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => Users.UpdatedBy" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Users Users { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddUsers()
    {
        using var context = DbFactory.CreateDbContext();
        context.Users.Add(Users);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/users");
    }
}
